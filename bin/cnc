#!/usr/bin/env node

process.env.NODE_ENV = process.env.NODE_ENV || 'production';

var _ = require('lodash');
var fs = require('fs');
var path = require('path');
var program = require('commander');
var pkg = require('../package.json');
require('colors');

function increaseVerbosityLevel(val, total) {
    return total + 1;
}

function parseMountPoint(val) {
    val = val || '';

    if (val.indexOf(':') >= 0) {
        var r = val.match(/(?:([^:]*)(?::(.*)))/);
        return {
            url: r[1] || '/static',
            path: r[2]
        };
    }

    return {
        url: '/static',
        path: val
    };
}

program
    .version(pkg.version)
    .usage('[options]')
    .option('-p, --port <port>', 'set listen port (default: 8000)', parseInt, 8000)
    .option('-H, --host <host>', 'set listen address or hostname (default: 0.0.0.0)', '0.0.0.0')
    .option('-b, --backlog <backlog>', 'set listen backlog (default: 511)', parseInt, 511)
    .option('-c, --config <filename>', 'set config file (default: ~/.cncrc)', '~/.cncrc')
    .option('-v, --verbose', 'increase the verbosity level', increaseVerbosityLevel, 0)
    .option('-m, --mount [<url>:]<path>', 'set the mount point for serving static files (default: /static:static)', parseMountPoint, { url: '/static', path: 'static' })
    .parse(process.argv);

var settings = require('../dist/app/config/settings');

if (program.verbose === 1) {
    _.set(settings, 'verbosity', 1);
    _.set(settings, 'winston.level', 'debug');
}
if (program.verbose === 2) {
    _.set(settings, 'verbosity', 2);
    _.set(settings, 'winston.level', 'trace');
}

{ // Load configuration settings
    var cncrc = settings['cncrc'];

    if (program.config) {
        cncrc = path.resolve(program.config);
    }

    try {
        var cnc = JSON.parse(fs.readFileSync(cncrc, 'utf8'));
        if (!(_.isObject(cnc))) {
            console.log('Check your configuration file to ensure it contain valid settings.'.bold.red);
            console.log(cnc);
            process.exit(1);
        }
        settings['cncrc'] = cncrc;
        settings['cnc'] = _.extend({}, settings['cnc'], cnc);
    }
    catch(err) {
    }
}

var routes = [
    {
        type: 'server',
        route: '/',
        // An absolute path is recommended to use
        server: path.resolve(__dirname, '../dist/app/app')
    }
];

if (program.mount) {
    routes.unshift({
        type: 'static',
        route: program.mount.url,
        directory: program.mount.path
    });
}

var main = require('..');
main({
    port: program.port,
    host: program.host,
    backlog: program.backlog,
    routes: routes
});
